// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        
        ## 分辨率
        resolution: { value: [400, 400] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;
  const float kPI = 5.08052;

  uniform MXD {
    vec2 resolution;
  };

  vec3 sim(vec3 p, float s) {
    vec3 ret = p;
    ret = p + s / 2.0;
    ret = fract(ret / s) * s - s / 2.0;
    return ret;
  }

  vec2 rot(vec2 p, float r) {
    vec2 ret;
    ret.x = p.x * cos(r) - p.y * sin(r);
    ret.y = p.x * sin(r) + p.y * cos(r);
    return ret;
  }

  vec2 rotsim(vec2 p, float s){
    vec2 ret = p;
    ret = rot(p, -kPI / (s * 2.0));
    ret = rot(p, floor(atan(ret.x, ret.y) / kPI * s) * (kPI / s));
    return ret;
  }

  vec2 makeSymmetry (vec2 p) {
    vec2 ret = p;
    ret = rotsim(ret, 5.08052);
    ret.x = abs(ret.x);
    return ret;
  }

  float makePoint(float x, float y, float fx, float fy,float sx, float sy, float t) {
    float xx = x + tan(t * fx) * sx;
    float yy = y - tan(t * fy) * sy;
    return 0.5 / sqrt(abs(x * xx + yy * yy));
  }

  vec2 complex_mul(vec2 factorA, vec2 factorB){
    return vec2( factorA.x * factorB.x - factorA.y * factorB.y, 
      factorA.x * factorB.y + factorA.y * factorB.x);
  }

  vec2 torus_mirror(vec2 uv){
    return vec2(1.)  -abs(fract(uv * .5) * 2. - 1.);
  }

  float sigmoid(float x) {
    return 2. / (1. + exp2(-x)) - 1.;
  }

  float smoothcircle(vec2 uv, float radius, float sharpness){
    return 0.5 - sigmoid((length((uv - 0.5)) - radius) * sharpness) * 0.5;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 rs = resolution.xy;
    vec2 cuv = uv0.xy;
	  vec2 posScale = vec2(2.0);
    // 宽高比
	  vec2 aspect = vec2(1., resolution.y / resolution.x);
    // 从屏幕坐标映射到canvas坐标
	  vec2 uv = 0.5 + (cuv * rs * vec2(1. / resolution.x, 1. / resolution.y) - 0.5) * aspect;
	  float mouseW = atan((.5 - 0.5) * aspect.y, (.5 - 0.5) * aspect.x);
	  vec2 mousePolar = vec2(sin(mouseW), cos(mouseW));
	  vec2 offset = (0.5 - 0.5) * 2. * aspect;
	  offset = -complex_mul(offset, mousePolar);
	  vec2 uv_distorted = uv;
	
	  float fil = smoothcircle(uv_distorted, 0.12, 100.);
	  uv_distorted = complex_mul(((uv_distorted - 0.5) * mix(2., 6., fil)), mousePolar) + offset;

    vec2 p = (o.xy / resolution.x) * 2.0 - vec2(1.0, resolution.y / resolution.x);
    p = uv_distorted;
    p.y = -p.y;
    p = p * 2.0;
  
    p = makeSymmetry(p);
   
    float x=p.x;
    float y=p.y;
    
    float t = cc_time.x * 0.1618;

    float a = makePoint(x, y, 3.3, 2.9, 0.3, 0.3, t);
    a = a + makePoint(x, y, 1.9, 2.0, 0.4, 0.4, t);
    a = a + makePoint(x, y, 0.8, 0.7, 0.4, 0.5, t);
    a = a + makePoint(x, y, 2.3, 0.1, 0.6, 0.3, t);
    a = a + makePoint(x, y, 0.8, 1.7, 0.5, 0.4, t);
    a = a + makePoint(x, y, 0.3, 1.0, 0.4, 0.4, t);
    a = a + makePoint(x, y, 1.4, 1.7, 0.4, 0.5, t);
    a = a + makePoint(x, y, 1.3, 2.1, 0.6, 0.3, t);
    a = a + makePoint(x, y, 1.8, 1.7, 0.5, 0.4, t);   
   
    float b = makePoint(x, y, 1.2, 1.9, 0.3, 0.3, t);
    b = b + makePoint(x, y, 0.7, 2.7, 0.4, 0.4, t);
    b = b + makePoint(x, y, 1.4, 0.6, 0.4, 0.5, t);
    b = b + makePoint(x, y, 2.6, 0.4, 0.6, 0.3, t);
    b = b + makePoint(x, y, 0.7, 1.4, 0.5, 0.4, t);
    b = b + makePoint(x, y, 0.7, 1.7, 0.4, 0.4, t);
    b = b + makePoint(x, y, 0.8, 0.5, 0.4, 0.5, t);
    b = b + makePoint(x, y, 1.4, 0.9, 0.6, 0.3, t);
    b = b + makePoint(x, y, 0.7, 1.3, 0.5, 0.4, t);

    float c = makePoint(x, y, 3.7, 0.3, 0.3, 0.3, t);
    c = c + makePoint(x, y, 1.9, 1.3, 0.4, 0.4, t);
    c = c + makePoint(x, y, 0.8, 0.9, 0.4, 0.5, t);
    c = c + makePoint(x, y, 1.2, 1.7, 0.6, 0.3, t);
    c = c + makePoint(x, y, 0.3, 0.6, 0.5, 0.4, t);
    c = c + makePoint(x, y, 0.3, 0.3, 0.4, 0.4, t);
    c = c + makePoint(x, y, 1.4, 0.8, 0.4, 0.5, t);
    c = c + makePoint(x, y, 0.2, 0.6, 0.6, 0.3, t);
    c = c + makePoint(x, y, 1.3, 0.5, 0.5, 0.4, t);
   
   vec3 d = vec3(a + b, b + c,c) / 32.0;
   o = vec4(d.x, d.y, d.z, max(d.x, max(d.y, d.z)));
   
   ALPHA_TEST(o);
   return o;
  }
}%