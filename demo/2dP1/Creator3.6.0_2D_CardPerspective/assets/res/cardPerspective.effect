// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        u_point: { value: [1, 1] }
        u_starty: { value: 0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec4 a_color;
  in vec2 a_texCoord;

  out vec4 v_color;
  out vec2 v_uv0;

  uniform Constant {
    vec2 u_point;
    float u_starty;
  };

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);
    
    pos.x += (u_point.x - pos.x) * ((pos.y - u_starty) / u_point.y);

    #if USE_PIXEL_AIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matViewProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    // 给片元着色器传值 v_uv0 不敢动！
    #if USE_TEXTURE
      v_uv0 = a_texCoord;
    #endif

    // 给片元着色器传值 v_color 不敢动！ 这个v_color就是在sprite组件里能调整的颜色的值
    v_color = a_color;

    // 输出的最终坐标。
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%