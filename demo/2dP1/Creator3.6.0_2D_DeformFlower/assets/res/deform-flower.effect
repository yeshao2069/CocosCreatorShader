// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        ## 自定义参数   分辨率
        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;

  uniform MXD {
    vec2 resolution;
  };

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 1);

    vec2 uv = uv0.xy;
    vec2 rs = resolution.xy;
    float time = cc_time.x;

    vec2 p = (2.0 * uv * rs - rs) / min(resolution.y, resolution.x);

    float a = atan(p.x, p.y);
    float r = length(p) * (0.8 + 0.2 * sin(0.3 * time));
    float w = cos(2.0 * time - r * 2.0);
    float h = 0.5 + 0.5 * cos(12.0 * a - w * 7.0 + r * 8.0 + 0.7 * time);
    float d = 0.25 + 0.75 * pow(h, 1.0 * r) * (0.7 + 0.3 * w);
    float f = sqrt(1.0 - r / d) * r * 2.5;
    f *= 1.25 + 0.25 * cos((12.0 * a - w * 7.0 + r * 8.0) / 2.0);
    f *= 1.0 - 0.35 * (0.5 + 0.5 * sin(r * 30.0)) * (0.5 + 0.5 * cos(12.0 * a - w * 7.0 + r * 8.0));
	
    vec3 col = vec3(f, f - h * 0.5 + r * .2 + 0.35 * h * (1.0 - r), f - h * r + 0.1 * h * (1.0 - r));
    col = clamp( col, 0.0, 1.0 );
    
    vec3 bcol = mix(0.5 * vec3(0.8,0.9,1.0), vec3(1.0), 0.5 + 0.5 * p.y );
    col = mix( col, bcol, smoothstep(-0.3, 0.6, r - d) );

    o = vec4(col, 1.);
   
    ALPHA_TEST(o);
    
    return o;
  }
}%