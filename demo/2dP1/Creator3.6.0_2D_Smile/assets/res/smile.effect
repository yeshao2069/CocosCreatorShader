// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        ## 自定义参数
        resolution: { value: [960, 640], editor: { tooltip: "分辨率"}}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec4 v_position;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    v_position = pos;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform MXD {
    vec2 resolution;
  };

  float Circle(vec2 uv, vec2 p, float r, float blur) {
    float d = length(uv - p);
    float c = smoothstep(r, r - blur, d);

    return c;
  }

  float Smiley(vec2 uv, vec2 p, float size) {
    uv -= p;
    uv /= size;
    float c = Circle(uv, vec2(0, 0), 0.4, 0.05);

    c -= Circle(uv, vec2(-0.13, 0.2), 0.07, 0.01);
    c -= Circle(uv, vec2(0.13, 0.2), 0.07, 0.01);

    float mouth = Circle(uv, vec2(0., 0.), 0.3, 0.02);
    mouth -= Circle(uv, vec2(0., 0.1), 0.3, 0.02);
    mouth = (mouth == 1.0) ? 1.0 : 0.0;
    c -= mouth;

    return c;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    vec2 fragCoord = uv0 * cc_screenSize.xy;
    vec2 uv = fragCoord / resolution.xy;
    uv -= 0.5;
    uv.x *= resolution.x / resolution.y;

    float mask = Smiley(uv, vec2(0.3, 0.3), 1.25);
    vec3 col = vec3(0.);
    col = vec3(1.0, 1.0, 0.0) * mask;

    o = vec4(col, 1.0);
    return o;
  }
}%
