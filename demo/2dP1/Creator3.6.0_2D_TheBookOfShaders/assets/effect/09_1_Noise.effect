// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        u_resolution : { value: [640, 640] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>

  uniform ARGS{
    vec2 u_resolution;
  };

  vec2 random2(vec2 p) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3))))*43758.5453);
  }

  vec4 frag () {
    vec2 st = gl_FragCoord.xy / u_resolution;
    st.x *= u_resolution.x / u_resolution.y;
    vec3 color = vec3(.0);
    //color = texture2D(texture, v_uv0).rgb;

    // Scale 
    st *= 3.;

    // Tile the space
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);
    // minimum distance
    float m_dist = 1.;

    for (int y=-1; y<=1; y++) {
      for (int x=-1; x<=1; x++) {
        // Neighbor place in the grid
        vec2 neighbor = vec2(float(x),float(y));
        // Random position form current + neighbor place in the grid
        vec2 point = random2(i_st+neighbor);

        // Animate the point
        point = 0.5 + 0.5*sin(cc_time.x+6.2831*point);

        // Vector between the pixel and the point
        vec2 diff = neighbor + point - f_st;

        // Distance to the point 
        float dist = length(diff);

        // Keep the closer distance
        m_dist = min(m_dist, dist);
      }
    }

    // Draw the min distance (distance field)
    color += m_dist;

    // Draw cell center
    color += 1. - step(.02, m_dist);

    // Draw grid
    color.r += step(.98, f_st.x) + step(.98, f_st.y);

    // Show isolines
    //color -= step(.7, abs(sin(27.0*m_dist)))*.5;

    return vec4(color, 1);
  }
}%
