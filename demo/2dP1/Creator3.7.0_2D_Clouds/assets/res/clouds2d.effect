// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    v_uv0 = a_texCoord;

    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv0);
    #endif
    v_color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;
  in vec2 v_uv0;

  const float cloudscale = 1.1;
  const float speed = 0.007;
  const float clouddark = 0.5;
  const float cloudlight = 0.3;
  const float cloudcover = 0.2;
  const float cloudalpha = 8.0;
  const float skytint = 0.5;
  const vec3 skycolor1 = vec3(0.2, 0.4, 0.6);
  const vec3 skycolor2 = vec3(0.4, 0.7, 1.0);
  const mat2 m = mat2(1.6, 1.2, -1.2, 1.6);

  vec2 hash(vec2 p) {
    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));
    vec2 r = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);
    return r;
  }

  float noise(vec2 p) {
    const float K1 = 0.366025404;
    const float K2 = 0.211324865;
    vec2 i = floor(p + (p.x + p.y) * K1);	
    vec2 a = p - i + (i.x + i.y) * K2;
    vec2 o = (a.x > a.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec2 b = a - o + K2;
    vec2 c = a - 1.0 + 2.0 * K2;
    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0); 
    vec3 n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));
    return dot(n, vec3(70.0));	
  }

  float fbm(vec2 n) {
    float total = 0.0;
    float amplitude = 0.1;
    for (int i = 0; i < 7; i++) {
      total += noise(n) * amplitude;
      n = m * n;
      amplitude *= 0.4;
    }
    return total;
  }

  vec4 frag () {
    vec2 resolution = cc_screenSize.xy;
    vec2 fragCoord = v_uv0.xy * resolution.xy;
    vec2 p = fragCoord / resolution.xy;
    vec2 uv = p * vec2(resolution.x / resolution.y, 1.0);
    float time = cc_time.x;
    float st = time * speed;
    float q = fbm(uv * cloudscale * 0.5);

    // ridged noise shape
	  float r = 0.0;
	  uv *= cloudscale;
    uv -= q - st;
    float weight = 0.8;
    for (int i = 0; i < 8; i++) {
		  r += abs(weight * noise(uv));
      uv = m * uv + st;
		  weight *= 0.7;
    }
    
    // noise shape
	  float f = 0.0;
    uv = p * vec2(resolution.x / resolution.y, 1.0);
	  uv *= cloudscale;
    uv -= q - st;
    weight = 0.7;
    for (int i = 0; i < 8; i++){
		  f += weight * noise(uv);
      uv = m * uv + st;
		  weight *= 0.6;
    }
    f *= r + f;
    
    // noise color
    float c = 0.0;
    st = st * speed * 2.0;
    uv = p * vec2(resolution.x / resolution.y, 1.0);
	  uv *= cloudscale * 2.0;
    uv -= q - st;
    weight = 0.4;
    for (int i = 0; i < 7; i++){
		  c += weight * noise(uv);
      uv = m * uv + st;
	    weight *= 0.6;
    }
    
    // noise ridge color
    float c1 = 0.0;
    st = st * speed * 3.0;
    uv = p * vec2(resolution.x / resolution.y, 1.0);
	  uv *= cloudscale * 3.0;
    uv -= q - st;
    weight = 0.4;
    for (int i = 0; i < 7; i++) {
		  c1 += abs(weight * noise(uv));
      uv = m * uv + st;
		  weight *= 0.6;
    }
    c += c1;

    vec3 skycolor = mix(skycolor2, skycolor1, p.y);
    vec3 cloudcolor = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight * c), 0.0, 1.0);
    f = cloudcover + cloudalpha * f * r;

    vec3 result = mix(skycolor, clamp(skytint * skycolor + cloudcolor, 0.0, 1.0), clamp(f + c, 0.0, 1.0));
    
    vec4 o = vec4(result, 1.0);

    return o;
  }
}%