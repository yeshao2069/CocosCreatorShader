// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        ## 自定义参数
        resolution: { value: [960, 640], editor: { tooltip: "分辨率"}}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec4 v_position;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    v_position = pos;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform MXD {
    vec2 resolution;
  };

  #pragma define S(a, b, c) smoothstep(a, b, c)
  #pragma define sat(x) clamp(x, 0.0, 1.0)

  float remap01(float a, float b, float t) {
    return sat((t - a) / (b - a));
  }

  float remap(float a, float b, float c, float d, float t) {
    return sat(((t - a) / (b - a)) * (d - c) + c);
  }

  vec2 within(vec2 uv, vec4 rect) {
    return (uv - rect.xy) / (rect.zw - rect.xy);
  }

  vec4 Eyes(vec2 uv) {
    uv -= 0.5;
    vec4 col = vec4(1.0);
    vec4 irisCol = vec4(0.3, 0.5, 1.0, 1.0); // blue
    float d = length(uv);
    col = mix(vec4(1.0), irisCol, S(0.1, 0.7, d) * 0.5);

    col.rgb *= 1. - S(0.45, 0.5, d) * 0.5 * sat(-uv.y - uv.x); // 眼影
    col.rgb = mix(col.rgb, vec3(0.0), S(0.3, 0.28, d));

    irisCol.rgb *= 1.0 + S(0.3, 0.05, d);
    col.rgb = mix(col.rgb, irisCol.rgb, S(0.28, 0.25, d));
    col.rgb = mix(col.rgb, vec3(0.0), S(0.16, 0.14, d));
    
    float highlight = S(0.1, 0.09, length(uv - vec2(-0.15, 0.15)));
    highlight += S(0.07, 0.05, length(uv - vec2(0.08, -0.08)));
    col.rgb = mix(col.rgb, vec3(1.0), highlight);

    col.a = S(0.5, 0.48, d);
    return col;
  }

  vec4 Head(vec2 uv){
    vec4 col = vec4(0.9, 0.65, 0.1, 1.0);    // orange
    float d = length(uv);
    col.a = S(0.5, 0.49, d);
    
    float edgeShadow = remap01(0.35, 0.5, d);
    edgeShadow *= edgeShadow;
    
    col.rgb *=1.0 - edgeShadow * 0.5;
    col.rgb = mix(col.rgb, vec3(0.6, 0.3, 0.1), S(0.47, 0.48, d));  // vec3(0.6, 0.3, 0.1) brown,边缘用棕色覆盖
    
    float highlight = S(0.41, 0.405, d); // 高亮区域
    highlight *= remap(0.41, -0.1, 0.75, 0.0, uv.y);
    col.rgb = mix(col.rgb, vec3(1.0), highlight);
    
    d = length(uv - vec2(0.25, -0.2));
    float cheek = S(0.2, 0.01, d)* 0.4;
    cheek *= S(0.17, 0.16, d);
    col.rgb = mix(col.rgb, vec3(1.0, 0.1, 0.1), cheek);  // red
    return col;
  }

  vec4 Mouth(vec2 uv) {
    uv -= 0.5;
    vec4 col = vec4(0.5, 0.18, 0.05, 1.0);
    
    uv.y *= 1.5;           // 使嘴巴变小
    uv.y -= uv.x * uv.x * 2.0;  // 调嘴型
    
    float d = length(uv);
    col.a = S(0.5, 0.48, d);
    
    float td = length(uv-vec2(0.0, 0.6));
    
    vec3 toothCol = vec3(1.0) * S(0.6, 0.35, d);  // 添加嘴巴牙齿上面的阴影
    col.rgb = mix(col.rgb, toothCol, S(0.4, 0.37, td));
    
    td = length(uv+vec2(0.0, 0.5));
    col.rgb = mix(col.rgb, vec3(1.0, 0.5, 0.5), S(0.5, 0.2, td));  // 舌头
    return col;
  }

  vec4 Smiley(vec2 uv) {
    vec4 col = vec4(0.0);
    
    uv.x = abs(uv.x);
    vec4 head = Head(uv);
    vec4 eyes = Eyes(within(uv, vec4(0.03, -0.1, 0.37, 0.25))); 
    vec4 mouth = Mouth(within(uv, vec4(-0.3, -0.4, 0.3, -0.1)));
    
    col = mix(col, head, head.a); 
    col = mix(col, eyes, eyes.a);
    col = mix(col, mouth, mouth.a);
    
    return col;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    vec2 fragCoord = uv0 * cc_screenSize.xy;
    vec2 uv = fragCoord / resolution.xy;
    uv -= 0.5;
    uv.x *= resolution.x / resolution.y;

    o = Smiley(uv);
    return o;
  }
}%
