// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
// References: http://tokyodemofest.jp/2014/7lines/index.html
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        ## 自定义参数   分辨率
        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;

  uniform MXD {
    vec2 resolution;
  };

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 1);

    vec2 uv = uv0.xy;
    vec2 rs = resolution.xy;
    float time = cc_time.x;
    
    vec2 position = abs(uv * rs * 2.0 -  rs) / min(resolution.x, resolution.y);
	  vec3 destColor = vec3(.70, 0.0, .75);
	  float f = 0.45;
	
    for(float i = 0.5; i < 21.0; i++) {
      float s = tan(sin(time / 3.0 - i)) ;
      float c = atan(cos(time / 7.0 - i));
      f +=abs(0.0047 / abs(length(5.0 * position * f - vec2(c, s) ) - 0.84));
    }

    o = vec4(vec3(destColor * f) + vec3(destColor.yzx * f/2.0), 1.0);
   
    ALPHA_TEST(o);
    return o;
  }
}%