// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        
        ## 分辨率
        resolution: { value: [400, 400] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;
  const float kPI = 3.141592;
  #pragma define NumberOfParticles 64

  uniform MXD {
    vec2 resolution;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 rs = resolution.xy;
    vec2 luv = uv0.xy;
    float time = cc_time.x;

    vec2 uv = (rs * luv - rs * 0.5) / resolution.y;
    vec3 c = vec3 (0.);  
    for (float i = 0.0; i <= 1.0; i += 1.0) {
        for(float x = -0.8; x <= 0.8; x += 1.6 / 32.0){
            float v = 0.0025 / length(uv - vec2(x, sin(i * 2.0 + x * 5.0 + time) * 0.4)); 
            c += v * vec3 (1.0 - i * 0.5, i -x, i + x * 2.0);
        }
    }
   
    o = vec4(c, 1.0);
   
    ALPHA_TEST(o);
   
    return o;
  }
}%