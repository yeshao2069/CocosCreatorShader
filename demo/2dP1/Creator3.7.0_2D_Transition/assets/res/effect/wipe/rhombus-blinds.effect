// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        blendValue: { value: 0.0, editor: { range:[-0.5, 0.5, 0.1], slide: true } }
        amount: { value: 6.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    uniform Constants{
      float blendValue;
      float amount;
    };
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      float radio = cc_screenScale.y / cc_screenScale.x;
      vec2 v_uv = uv0;
      #if SAMPLE_FROM_RT
        v_uv.y = (1.0-v_uv.y)*radio;
      #else
        v_uv.y *= radio;
      #endif
      // v_uv.y = (1.0-v_uv.y)*radio;
      vec2 center = vec2(0.5, 0.5 * radio);
      // v_uv = center + rotateUV(v_uv - center,_Rotate);
      float h = abs(fract(v_uv.x * amount) * 2.0 - 1.0) - blendValue;
      float v = abs(fract(v_uv.y * amount * 0.5625 + 0.5) * 2.0 - 1.0) + blendValue;
      float al = step(0.0, h - v);
      o.a = al;
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
