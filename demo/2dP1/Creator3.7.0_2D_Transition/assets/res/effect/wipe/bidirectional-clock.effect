// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        blendValue: { value: 0.0, editor: { range:[0, 3.2, 0.1], slide: true } }
        width: { value: 10.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    uniform Constants{
      float blendValue;
      float width;
    };
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      vec2 normalUV = uv0;
      #if SAMPLE_FROM_RT
        normalUV.y = 1.0-normalUV.y;
      #endif
      vec2 newUV = floor(normalUV * width)/width;
      float f1 = acos(dot(vec2(1, 0), normalize(newUV-0.5)));
      float f2 = acos(dot(vec2(-1, 0), normalize(newUV-0.5)));

      float uv_y = normalUV.y - 0.5;
      if(uv_y < 0.0){
        if(f1 < blendValue){
          o.a = 0.0;
        }else{
          o.a = 1.0;
        }
      }else{
        if(f2 < blendValue){
          o.a = 0.0;
        }else{
          o.a = 1.0;
        }
      }
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
