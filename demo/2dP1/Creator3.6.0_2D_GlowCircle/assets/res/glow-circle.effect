// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        ## 自定义参数   分辨率
        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;

  #pragma define M_PI 3.1415926535897932384626433832795
  #pragma define M_TWO_PI (2.0 * M_PI) 

  uniform MXD {
    vec2 resolution;
  };

  float rand(vec2 n) {
    return fract(sin(dot(n, vec2(12.9898, 12.1414))) * 83758.5453);
  }

  float noise(vec2 n) {
      const vec2 d = vec2(0.0, 1.0);
      vec2 b = floor(n);
      vec2 f = smoothstep(vec2(0.0), vec2(1.0), fract(n));
      return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);
  }

  vec3 ramp(float t) {
    return t <= .5 ? vec3( 1. - t * 1.4, .2, 1.05 ) / t : vec3( .3 * (1. - t) * 2., .2, 1.05 ) / t;
  }

  vec2 polarMap(vec2 uv, float shift, float inner) {
      uv = vec2(0.5) - uv;
      float px = 1.0 - fract(atan(uv.y, uv.x) / 6.28 + 0.25) + shift;
      float py = (sqrt(uv.x * uv.x + uv.y * uv.y) * (1.0 + inner * 2.0) - inner) * 2.0;
      return vec2(px, py);
  }

  float fire(vec2 n) {
      return noise(n) + noise(n * 2.1) * .6 + noise(n * 5.4) * .42;
  }

  float shade(vec2 uv, float t) {
      uv.x += uv.y < .5 ? 23.0 + t * .035 : -11.0 + t * .03;    
      uv.y = abs(uv.y - .5);
      uv.x *= 35.0;
      
      float q = fire(uv - t * .013) / 2.0;
      vec2 r = vec2(fire(uv + q / 2.0 + t - uv.x - uv.y), fire(uv + q - t));
      
      return pow((r.y + r.y) * max(.0, uv.y) + .1, 4.0);
  }

  vec3 getColor(float grad) {
      float m2 = .15;//iMouse.z < 0.0001 ? 1.15 : iMouse.y * 3.0 / resolution.y;
      grad = sqrt( grad);
      vec3 color = vec3(1.0 / (pow(vec3(0.5, 0.0, .1) + 2.61, vec3(2.0))));
      vec3 color2 = color;
      color = ramp(grad);
      color /= (m2 + max(vec3(0), color));
      return color;
  }

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 1);
    float m1 = 2.6;//iMouse.z < 0.0001 ? 3.6 : iMouse.x * 5.0 / resolution.x;

    vec2 uv = uv0 * resolution / resolution.yy;
    float time = cc_time.x;

    float ff = 1.0 - uv.y;
    uv.x -= (resolution.x / resolution.y - 1.0) / 2.0;
    vec2 uv2 = uv;
    uv2.y = 1.0 - uv2.y;
   	uv = polarMap(uv, 1.3, m1);
   	uv2 = polarMap(uv2, 1.9, m1);

    vec3 c1 = getColor(shade(uv, time)) * ff;
    vec3 c2 = getColor(shade(uv2, time)) * (1.0 - ff);

    o = vec4(c1 + c2, 1.0);
   
    ALPHA_TEST(o);
    
    return o;
  }
}%