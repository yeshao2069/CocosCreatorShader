// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        
        ## 分辨率
        resolution: { value: [400, 400] }
}%

CCProgram sprite-vs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  in vec2 uv0;
  const float kPI = 3.141592;
  #pragma define NumberOfParticles 64

  uniform MXD {
    vec2 resolution;
  };

  vec3 palette(float x) {
	  return vec3(
      sin(x * 2.0 * kPI) + 1.5,
      sin((x + 1.0 / 3.0) * 2.0 * kPI) + 1.5,
      sin((x + 2.0 / 3.0) * 2.0 * kPI) + 1.5
    ) / 2.5;
  }

  float starline(vec2 relpos, float confradius, float filmsize) {
    if(abs(relpos.y) > confradius)
      return 0.0;
    float y = relpos.y / confradius;
    float d = abs(relpos.x / filmsize);
    return sqrt(1.0 - y * y) / (0.0001 + d * d) * 0.00001;
  }

  float star(vec2 relpos, float confradius, float filmsize) {
    vec2 rotpos = mat2(
      cos(kPI / 3.0), -sin(kPI / 3.0),
      sin(kPI / 3.0), cos(kPI / 3.0)) * relpos;
    vec2 rotpos2 = mat2(
      cos(kPI / 3.0), sin(kPI / 3.0),
      -sin(kPI / 3.0), cos(kPI / 3.0)) * relpos;
    return starline(relpos, confradius, filmsize) +
      starline(rotpos, confradius, filmsize) +
      starline(rotpos2, confradius, filmsize);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 rs = resolution.xy;
    vec2 uv = uv0.xy;
    float time = cc_time.x;
	  
    vec2 screenpos = (2.0 * uv * rs - rs) / max(resolution.x, resolution.y);

    float focaldistance = 0.5 + sin(time * 0.05) * 0.013;
    float focallength = 0.100;
    float filmsize = 0.036;
    float minconf = filmsize / 1000.0;
    float lensradius = focallength / 1.0;
	  float filmdistance = 1.0 / (1.0 / focallength - 1.0 / focaldistance);
	
	  vec3 c = vec3(0.0);
	  for (int i = 0; i < NumberOfParticles; i++) {
		  float t = float(i) / float(NumberOfParticles);
		  float a = t * 2.0 * kPI + time * 0.1;
      vec3 pos = vec3(sin(a) + 2.0 * sin(2.0 * a),
        cos(a) - 2.0 * cos(2.0 * a),
        -sin(3.0 * a)) * 0.01;
      float a1 = 0.1 * time;

		  pos.xz *= mat2(cos(a1), -sin(a1), sin(a1), cos(a1));
		  pos.z += 0.5;
		  
      float intensity = 0.0000002;
      vec2 filmpos = pos.xy / pos.z * filmdistance;
		  float confradius = lensradius * filmdistance * abs(1.0 / focaldistance - 1.0 / pos.z) + minconf;

		  float diffusedintensity = intensity / (confradius * confradius);
		  vec3 colour = palette(t);

		  vec2 relpos = filmpos - screenpos / 2.0 * filmsize;
		  if (length(relpos) < confradius)
        c += colour * diffusedintensity;
      c += colour * diffusedintensity * star(relpos, confradius, filmsize);
	  }
   
    o = vec4(pow(c, vec3(1.0 / 2.2)), 1.0);
   
    ALPHA_TEST(o);
   
    return o;
  }
}%