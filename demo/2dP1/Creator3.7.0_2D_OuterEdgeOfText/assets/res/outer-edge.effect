// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
//
// 2020 - A celebration of new year by Philippe Desgranges
// Email: Philippe.desgranges@gmail.com
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//

// Note: This shader is a fairly standard 2D composition with two layers. The digits
// are produced with bespoke signed distance functions (the fact that 2020 has only two diferent
// digits made the process easier).
// The background is itslef a composition of 3 layers of cellular bokeh with some color tweaks
// similar to techniques shown in BigWings tutorials.
//
// There is no huge technical feat but I wanted to create a warm and colorfull image.
// Tell me what you think :D
// https://www.shadertoy.com/view/WdGSDd

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  #pragma define S(a, b, c) smoothstep(a, b, c)

  float shadowsIntensity = 0.74;
  float shadowRadius = 1.1;
  vec3 red = vec3(0.9, 0.01, 0.16);
  vec3 yellow = vec3(0.96, 0.70, 0.19); // 248, 181, 51
  vec3 green = vec3(0.00, 0.63, 0.34);  //1, 162, 88
  vec3 blue = vec3(0.01, 0.57, 0.76);   //5, 142, 197

  uniform MXD {
    vec2 resolution;
  };

  // outputs a colored shape with a white border from distance field (RGBA premultiplied)
  vec4 border(vec3 color, float dist) {
    vec4 res;
    float aa = 30. / resolution.x;
    
    res.a = S(0.25 + aa, 0.25, dist); 
    res.rgb = mix(color, vec3(res.a),  S(0.1, 0.1 + aa, dist)); 
    
    return res;
  }

  // Blend a premultiplied rbga color onto rgb
  vec3 premulBlend(vec4 src, vec3 dst) {
    return dst * (1.0 - src.a) + src.rgb;
  }

  // Blend a premultiplied rbga color onto rgba (accurate alpha handling)
  vec4 premulBlend(vec4 src, vec4 dst) {
    vec4 res;
    res.rgb = dst.rgb * (1.0 - src.a) + src.rgb;
    res.a = 1.0 - (1.0 - src.a) * (1.0 - dst.a); 
    
    return res;
  }


  // Distance field to the digit 0
  float zeroDst(vec2 uv) {
    float dist;
    
    uv.y -= 0.5;
    
    if (uv.y > 0.0) {
      // upper part
      uv.y = pow(uv.y, 1.8);
      dist = length(uv);
    } else if (uv.y > -1.1) {
      // middle part
      dist = abs(uv.x);
    } else {
      // lower part
      uv.y += 1.1;
      uv.y = pow(-uv.y, 1.8);
      dist = length(uv);
    }
    
    return (abs(dist - 0.725) - 0.275);
  }

  // a box distance function
  float box(vec2 p, vec2 b) {
    vec2 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);
  }

  // Distance field to the digit 2
  float twoDst(vec2 uv) {
    uv.y -= 0.5;
    
    float topBar = box((uv + vec2(0.725, 0.0)) * vec2(1.0, 1.4), vec2(0.275, 0.0));
    
    if (uv.y > 0.0) {
      // Top 'curve'
      uv.y = pow(uv.y, 1.8);
      float dist = length(uv);
      return max(-topBar, (abs(dist - 0.725) - 0.275));
    } else {
      float bottomBar = box((uv + vec2(0.0, 1.83)) * vec2(1.0, 1.4), vec2(0.95, 0.299));
      float two = min(topBar, bottomBar);
        
      if (uv.y > -1.8) {    
        float curve = (cos(uv.y * 2.0) - 1.0) * 0.7;
        float x = 0.0 + uv.x - curve;
        float mid = abs(uv.y + 0.4) * 0.7;
        float x2 = 0.0 + uv.x - curve - mid * mid * 0.15 + 0.01;
    
        two = min(two, max(-x + 0.45, x2 -1.0));
        }
      return two;
    }
  }


  // Coordinate transform from global uv space to charcter space with poition and rotation
  vec2 letterUVs(vec2 uv, vec2 pos, float angle) {
    float c = sin(angle);
    float s = cos(angle);
    float sc = 1.35;
    uv -= pos;
    return uv.x * vec2(s * sc, c) + uv.y * vec2(-c * sc, s);
  }

  // Character two with outline and shadow (premultiplied RGBA)
  vec4 twoCol(vec2 uv, vec3 col, vec2 pos, float angle) {
    uv = letterUVs(uv, pos, angle);
    vec4 res = border(col, twoDst(uv));
    uv.y += 0.14;
    res.a = min(res.a +  S(shadowRadius, -1.0, twoDst(uv)) * shadowsIntensity, 1.0);
    
    return res;
  }

  // Character zero with outline and shadow (premultiplied RGBA)
  vec4 zeroCol(vec2 uv, vec3 col, vec2 pos, float angle) {
    uv = letterUVs(uv, pos, angle);
    vec4 res = border(col, zeroDst(uv));
    
    uv.y += 0.14;
    res.a = min(res.a +  S(shadowRadius, -1.0, zeroDst(uv)) * shadowsIntensity, 1.0);
    
    return res;
  }

  // 2022 with colors and shadows (premultiplied rgba)
  vec4 yearCol(vec2 uv) {
      float angle = sin(cc_time.x) * 0.3;
      
      vec4 date = twoCol(uv, red, vec2(-2.5, 0.0), angle);
      date = premulBlend(zeroCol(uv, yellow, vec2(-0.8, 0.0), angle), date);
      date = premulBlend(twoCol(uv, green, vec2(0.8, 0.0), angle), date);
      date = premulBlend(twoCol(uv, blue, vec2(2.5, 0.0), angle), date);
      
      return  date;
  }

  // Borrowed from BigWIngs (random 1 -> 4)
  vec4 N14(float t) {
    return fract(sin(t*vec4(123., 104., 145., 24.))*vec4(657., 345., 879., 154.));
  }


  // Compute a randomized Bokeh spot inside a grid cell
  float bokehSpot(vec2 uv, vec2 id, float decimation) {
      float accum = 0.0;
      
      for (float x = -1.0; x <= 1.0; x += 1.0) {
        for (float y = -1.0; y <= 1.0; y += 1.0) {
            vec2 offset = vec2(x, y);
            vec2 cellId = id + offset;
            vec4 rnd = N14(mod(cellId.x, 300.0) * 25.3 + mod(cellId.y, 300.0) * 6.67);
    
            vec2 cellUV = uv - offset + rnd.yz * 0.5;

            float dst = length(cellUV);

            float radSeed = sin(cc_time.x * 0.02 + rnd.x * 40.0);
            float rad =  (abs(radSeed) - decimation) / (1.0 - decimation);

            float intensity = S(rad, rad - 0.15, dst);
            
            accum += intensity;
        }
      }
      
      return accum;
  }

  // Computes a random layer of bokeh spots
  float bokehLayer(vec2 uv, float decimation) {
      vec2 id = floor(uv);
      vec2 cellUV = (uv - id) - vec2(0.5, 0.5) ;

      float intensity = bokehSpot(cellUV, id, decimation);
      
      return intensity;
  }

  // Computes the bokeh background
  vec3 bokeh(vec2 uv) {
    //accumulates several layers of bokeh
    float intensity = bokehLayer(uv * 1.4 + vec2(cc_time.x * 0.3, 0.0), 0.9) * 0.2;
    //intensity += bokehLayer(uv * 0.8 + vec2(200.0 + cc_time.x * 0.3, 134.0), 0.9) * 0.3;
    intensity += bokehLayer(uv * 0.5 + vec2(0.0 + cc_time.x * 0.3, 334.0), 0.95) * 0.15;  
    intensity += bokehLayer(uv * 3.0 + vec2(cc_time.x * 0.3, 99.0), 0.95) * 0.05;
    
    float cDist = max(0.0, 1.0 - length(uv) * 0.05);
    intensity = cDist + intensity;
    
    // Vary color with intensity
    vec3 chroma = mix(vec3(1.0, 1.0, 0.4), vec3(1.0, 0.7, 0.5), uv.y * 0.1 + 0.4 + intensity * 0.4);
    
    return chroma * intensity;
  }

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    vec2 fragCoord = uv0 * resolution;
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (2.0 * fragCoord - resolution.xy) / resolution.y;
    uv *= 3.0;
    
    vec4 dateCol = yearCol(uv); // 2022
    vec3 bg = bokeh(uv);
    
    //add a bit of light
    dateCol.rgb -= uv.y * 0.15 * dateCol.a;
    bg.rgb -= uv.y * 0.03;
    
    // blend 2022 and BG
    vec3 col = premulBlend(dateCol, bg);
    
    // Gamma correction to make the image warmer
    float gamma = 0.8;
    col.rgb = pow(col.rgb, vec3(gamma));

    o = vec4(col, 1.0);
    return o;
  }
}%
