
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        # 画布尺寸
        canvas_size: { value: [ 667.0, 375.0 ] }
        # 中心点
        center: { value: [ 0.5, 0.5 ] }
        # 波纹圆心
        wave_radius: {  value: 0.18 }
        # 波纹偏移量
        wave_offset: { value: 2.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform ARGS{
    vec2 center;
    vec2 canvas_size;
    float wave_radius;
    float wave_offset;
  };

  vec4 frag() {
		vec2 distance_vec = center - v_uv0;
		distance_vec = distance_vec * vec2(canvas_size.x / canvas_size.y, 1.0);
		float distance = sqrt(distance_vec.x * distance_vec.x + distance_vec.y * distance_vec.y);

		// distance小于1，但是我们希望能有多个波峰波谷，所以在sin的内部乘上一个比较大的倍数
		// sin函数的值在-1到1之间，我们希望偏移值很小，所以输出的时候需要缩小一定的倍数倍
		float sin_factor = sin(distance * 100.0 + cc_time.x) * 0.05;
		float discard_factor = clamp(wave_radius - abs(wave_offset - distance), 0.0, 1.0);

		// 计算总的uv的偏移值
		vec2 offset = normalize(distance_vec) * sin_factor * discard_factor;
		vec2 uv = offset + v_uv0;

    return texture(cc_spriteTexture, uv);
  }
}%