// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
   in vec2 a_uv0;
   out vec2 v_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
     v_uv0 = a_uv0;
    #endif

    v_uv0 = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  #pragma define PI 3.141592653

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  float circle(in vec2 uv, in float radius){
    return 1.0 - smoothstep(radius - 0.01 * radius, radius + 0.01 * radius, length(uv));
  }

  vec4 frag () {
    vec4 o = vec4(0, 0, 0, 0);

    #if USE_TEXTURE

      vec2 uv = v_uv0 - 0.5;

      float R = 0.35;
      float radius = 0.05;
      vec2 pos = vec2(0.0);
      float rotation = 0.0;
      const float count = 12.0;
      float time = cc_time.x;

      for (float i = 0.0; i < count; i++) {
        rotation = 2.0 * PI * i / count + time * 2.0 * PI / 4.0;
        pos = vec2(R * cos(rotation), R * sin(rotation));
        o.a += circle(uv - pos, radius * (sin(rotation * 0.45) + 1.0) / 3.0 + radius / 3.0);
        o.r += o.a * (sin(i / count + time + PI * 6.0 / 3.0) + 1.0) / 2.0;
        o.g += o.a * (sin(i / count + time + PI * 4.0 / 3.0) + 1.0) / 2.0;
        o.b += o.a * (sin(i / count + time + PI * 2.0 / 3.0) + 1.0) / 2.0;
      }

    #endif

    o *= v_color;
    ALPHA_TEST(o);
    return o;
  }
}%