CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  float drawHalfCircle(vec2 center, vec2 uv, float radius) {
    float dis = distance(uv, center);
    dis = smoothstep(radius, radius - .005, dis);

    return dis;
  }

  float drawHalfCircleLine(vec2 center, vec2 uv, float radius, float width) {
    float c1 = drawHalfCircle(center, uv, radius);
    float c2 = drawHalfCircle(center, uv, radius - width);
    return c1 - c2;
  }

  vec4 frag() {
    vec3 color = vec3(1,1,1);
    // vec2 point = vec2(.5,1.);
    vec2 point = vec2(.5,.5);

    float circleline_red = drawHalfCircleLine(point, v_uv0, .4, .05);
    float circleline_orange = drawHalfCircleLine(point, v_uv0, .35, .05);
    float circleline_yellow = drawHalfCircleLine(point, v_uv0, .3, .05);
    float circleline_green = drawHalfCircleLine(point, v_uv0, .25, .05);
    float circleline_cyan = drawHalfCircleLine(point, v_uv0, .2, .05);
    float circleline_blue = drawHalfCircleLine(point, v_uv0, .15, .05);
    float circleline_purple = drawHalfCircleLine(point, v_uv0, .1, .05);

    vec3 color_red = vec3(1.,0.,0.);
    vec3 color_orange = vec3(1.,.5,0.);
    vec3 color_yellow = vec3(1.,1.,0.);
    vec3 color_green = vec3(0.,1.,0.);
    vec3 color_cyan = vec3(0.,1.,1.);
    vec3 color_blue = vec3(0.,0.,1.);
    vec3 color_purple = vec3(.5,0.,1.);
    
    vec3 ret = circleline_red * color_red + circleline_orange * color_orange + 
      circleline_yellow * color_yellow + circleline_green * color_green +
      circleline_cyan * color_cyan + circleline_blue * color_blue +
      circleline_purple * color_purple;
    
    color *= ret;
		vec4 o = vec4(color, 1);

    // vec3 c = vec3(0.);
    // float x = v_uv0.x;
    // float y = v_uv0.y;
    // c = vec3(sin(4.*x+0.85)*2.-0.5,
    //             sin(5.*x-1.),
    //             sin(3.*x-1.5) *1.5
    //             );
    // o = vec4(c, 1);
    
    return o;
  }
}%