CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 自定义参数
        brightness: { value: 0.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;
  out vec3 v_pos;
  out vec3 v_normal;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;

      v_pos = (cc_matWorld * pos).xyz;
    #else
      pos = cc_matViewProj * pos;
      v_pos = pos.xyz;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;
    v_normal = vec3(0, 0, 1);

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;
  in vec3 v_pos;
  in vec3 v_normal;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform MXD{
    float brightness;
  };

  vec4 highLight(vec4 color) {
    float r = color.r;
    float g = color.g;
    float b = color.b;
    float maxc = max(max(r, g), b);
    float minc = min(min(r, g), b);
    float l = (maxc + minc) / 2.0;
    l = min(1.0, l + brightness);

    float h;
    float s;
    if (maxc == minc) {
			h = 0.0;
			s = 0.0;
		} else {
      float dif = maxc - minc;
      if (maxc == r) {
        h = 60.0 * (g - b) / dif;
				if (g < b) {
          h = h + 360.0;
        }
      } else if (maxc == g) {
				h = 60.0 * (b - r) / dif + 120.0;
			} else if (maxc == b) {
				h = 60.0 * (r - g) / dif + 240.0;
			}
      if (l == 0.0) {
				s = 0.0;
			} else if (l <= 0.5) {
				s = dif / (2.0 * l);
			} else if (l > 0.5) {
				s = dif / (2.0 - 2.0 * l);
			}
			s = min(1.0, max(0.0, s));
    }

    float d16 = 0.167;
		float d23 = 0.667;
		float q;
		if (l < 0.5) {
			q = l * (1.0 + s);
		} else if (l >= 0.5) {
			q = l + s - l * s;
		}
		float p = 2.0 * l - q;
		float hk = h / 360.0;
		float t[3];
		t[0] = hk + 1.0 / 3.0;
		t[1] = hk;
		t[2] = hk - 1.0 / 3.0;
		for (int i = 0; i < 3; i++) {
			if (t[i] < 0.0) {
        t[i]+=1.0;
      }
			if (t[i] > 1.0) {
        t[i]-=1.0;
      }
		}

    float c[3];
		for (int i = 0; i < 3; i++){
		  float te = t[i];
			if (te < d16) {
				c[i] = p + ((q - p) * 6.0 * te);
			} else if (te < 0.5) {
				c[i] = q;
			} else if (te < d23){
				c[i] = p + ((q - p) * 6.0 * (d23 - te));
			} else {
				c[i] = p;
			}
		}

    return vec4(c[0],c[1],c[2], color.a);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    vec4 color = v_color * CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
		
		o = highLight(color);

    return o;
  }
}%