CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        # 自定义参数
        alphaThreshold: { value: 0.5 }
        # 光颜色
        lightColor: { 
          value: [1, 1, 1, 1], 
          editor: {
            type: color
          }
        }
        # 光坐标
        lightPos: {
          value: [0, 0, 1, 1]
        }
        # 光
        ambientLight: {
          value: [0.1, 0.1, 0.1, 1],
          editor: {
            type: color
          }
        }
        # 光系数
        shininess: { value: 32.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;
  out vec3 v_pos;
  out vec3 v_normal;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;

      v_pos = (cc_matWorld * pos).xyz;
    #else
      pos = cc_matViewProj * pos;
      v_pos = pos.xyz;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;
    v_normal = vec3(0, 0, 1);

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 v_color;
  in vec3 v_pos;
  in vec3 v_normal;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform MXD{
    vec4 lightColor;
    vec4 lightPos;
    vec4 ambientLight;
    float shininess;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 realPos = v_uv0;

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    #endif

    vec3 viewPos = cc_cameraPos.xyz;

    // ambient
    vec3 ambient = ambientLight.rgb;

    // 
    vec3 norm = normalize(v_normal);
    vec3 lightDir = normalize(lightPos.xyz - v_pos);

    // diffuse
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor.rgb;

    // phong-specular
    // vec3 viewDir = normalize(viewPos - v_pos);
    // vec3 reflectDir = reflect(-lightDir, norm);
    // float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    // vec3 specular = spec * lightColor.rgb;

    // blint-phong
    vec3 viewDir    = normalize(viewPos - v_pos);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), shininess);
    vec3 specular = lightColor.rgb * spec;

    o.rgb = (ambient + diffuse + specular) * o.rgb;

    o *= v_color;

    ALPHA_TEST(o);

    return o;
  }
}%