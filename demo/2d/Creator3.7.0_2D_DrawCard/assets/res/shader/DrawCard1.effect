CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif

  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv0;

  #if USE_TEXTURE
    in vec2 a_uv0;
  #endif

  uniform PointData {
    vec4 xlist;
    vec4 ylist;
    vec2 disX;
    vec2 disY;
    float sprWidth;
    float sprHeight;
  };

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
      v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_uv0 = a_texCoord;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform PointData {
    vec4 xlist;
    vec4 ylist;
    vec2 disX;
    vec2 disY;
    float sprWidth;
    float sprHeight;
  };

  bool isHide (float px, float py) {
    bool b = false;
    float dx = px * sprWidth;
    float dy = py * sprHeight;
    if (disX[0] != 0.0 || disX[1] != 0.0) {
        if (dx >= disX[0] && dx <= disX[1]) {
            return true;
        }
    } else if (disY[0] != 0.0 || disY[1] != 0.0) {
        if (dy >= disY[0] && dy <= disY[1]) {
            return true;
        }
    }
    
    if (((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0])) {
       b = !b;
    }
    if (((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1])) {
       b = !b;
    }
    if (((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2])) {
       b = !b;
    }
    return b;
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    
    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv0);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    bool hide = isHide(v_uv0.x, v_uv0.y);
    if (hide) {
      o.a = 0.0;
    }

    return o;
  }
}%