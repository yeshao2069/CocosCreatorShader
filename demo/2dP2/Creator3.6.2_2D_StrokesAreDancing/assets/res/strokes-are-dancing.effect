// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
    in vec2 a_uv0;
    out vec2 v_uv0;
  #endif

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    	v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  #pragma define iResolution vec2(960.0,640.0)

  in vec4 v_color;

  #if USE_TEXTURE
    in vec2 v_uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #pragma define PI 3.141592
  #pragma define ITER 100.
  #pragma define time cc_time.x

  // taken from YX here : https://www.shadertoy.com/view/tdlXW4
  // rough shadertoy approximation of the bonzomatic noise texture
  vec4 texNoise(vec2 uv) {
      float f = 0.;
      f += texture(cc_spriteTexture, uv*.125).r*.5;
      f += texture(cc_spriteTexture, uv*.25).r*.25;
      f += texture(cc_spriteTexture, uv*.5).r*.125;
      f += texture(cc_spriteTexture, uv*1.).r*.125;
      f=pow(f,1.2);
      return vec4(f*.45+.05);
  }

  float hash2d (vec2 st) {
    return fract(sin(dot(st,vec2(2.445,8.55)))*4.4541);
  }

  float hash (float x) {
    return fract(sin(x)*14.4545);
  }

  float moda (inout vec2 p, float rep) {
      float per = 2.*PI/rep;
      float a = atan(p.y,p.x);
      float l = length(p);
      float id = floor((a-per*0.5)/per);
      a = mod(a-per*0.5, per)-per*0.5;
      p = vec2(cos(a),sin(a))*l;
      if (abs(id)>= rep/2.) id = abs(id);
      return id;
  }

  mat2 rot (float a) {
    return mat2(cos(a),sin(a),-sin(a),cos(a));
  }

  // iq's function
  // polynomial smooth min (k = 0.1);
  float smin( float a, float b, float k ) {
      float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );
      return mix( b, a, h ) - k*h*(1.0-h);
  }

  float sphe (vec3 p, float r)
  {return length(p)-r;}

  float od (vec3 p, float d) {
    return dot(p,normalize(sign(p)))-d;
  }

  float box (vec3 p, vec3 c) {
    vec3 q = abs(p)-c;
    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));
  }

  float cyl (vec3 p, float r, float h) {
    return max(length(p.xy)-r,abs(p.z)-h);
  }

  float water (vec3 p) {
    vec3 pp = p;
    float s= sphe (p, 3.);
    float b = box(p+vec3(0.,.6,0.), vec3(5.,0.5,5.));
    
    p.xz *= rot(p.y*0.5);
    float cyl_id = moda(p.xz, 4.);
    p.x -= 2.5;
    float c = cyl(p.xzy, 0.8, 10.);
    
    p = pp;
    p.y += sin(length(p.xz*4.)-time*2.)*0.1;
    return max(-b,max(-c,max(s,abs(p.y+2.)-3.)));
  }

  float waterfall (vec3 p) {
    p.xz *= rot(p.y*0.5);
    float cyl_id = moda(p.xz, 4.);
    p.x -= 2.5;
    float c = cyl(p.xzy, 0.4+sin(p.y*0.15), 3.);
    return c;
  }

  float gem (vec3 p) {
      p.y -= 3.;
      p.xz*=rot(time);
      float o = od(p, 1.2);
      return o;
  }

  float inside_gem (vec3 p) {
    p.y += 0.5;
    float o = od(p,0.5);
    return o;
  }

  vec3 cyl_grid_ids;
  float cyl_grid (vec3 p) {
    p.z += sin(p.y+time);
    vec3 per = vec3(0.3,2.,0.3);
    cyl_grid_ids = floor((p-per*0.5)/per);
    p.y -= hash2d(cyl_grid_ids.xz)+time;
    p = mod(p-per*0.5, per)-per*0.5;
    p.x -= sin(p.y*5.+time)*0.1;
    return cyl(p.xzy, 0.1, 0.8);
  }

  int mat = 0;
  float SDF (vec3 p) {
    p.y += texNoise(p.xz).x*0.8;
    float g = gem(p);
    float ig = inside_gem(p);
    float w = water(p);
    float wf = waterfall(p);
    
    float d = smin(g,min(ig,min(w, wf)), 0.2);
    if (d == w) mat=1;
    if (d == wf) mat=2;
    if (d == g || d == ig) mat=3;
    d = max(cyl_grid(p), d);
    return d;
  }

  vec3 getcam (vec3 ro, vec3 tar, vec2 uv, float fov) {
    vec3 forward = normalize(tar-ro);
    vec3 left = normalize(cross(vec3(0.,1.,0.),forward));
    vec3 up = normalize(cross(forward, left));
    return normalize(forward * fov + left * uv.x + up * uv.y);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 inuv = v_uv0;
    vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);
    uv -= 0.5;
    uv /= vec2(iResolution.y / iResolution.x, 1);
    float dither = hash2d(uv);
    
    vec3 ro = vec3(0.01,3.,-10.); vec3 p = ro;
    vec3 tar = vec3(0.,1.,0.);
    vec3 rd = getcam(ro, tar, uv, 1.);
    vec3 col = vec3(0.);

    bool hit = false;
    float shad = 0.;
  
    for (float i=0.; i<ITER; i++) {
      float d = SDF(p);
      if (d<0.001) {
        hit = true;
        shad = i/ITER;
        break;
      }
      d *= 0.9+dither*0.2;
      p += d*rd;
    }
    if (hit) {
      if (mat == 1) col = vec3(hash(cyl_grid_ids.x)*0.5, hash(cyl_grid_ids.z), 1.);
      if (mat == 2) col = vec3(hash(cyl_grid_ids.z), 1., hash(cyl_grid_ids.x));
      if (mat == 3) col = vec3(1., hash(cyl_grid_ids.z),hash(cyl_grid_ids.x)*0.3);;
    }
    else col = vec3(1.);
  
    vec2 q = gl_FragCoord.xy / iResolution.xy;
    col *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), 0.3);


    ALPHA_TEST(o);
    return vec4(pow(col,vec3(0.4545)), 1.);
  }
}%
