// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        u_resolution : { value: [640, 640] }
        fog_color: { editor: { type: color } }
        fog_size: { value: 1.0 }
        fog_density: { value: 1.0 }
        fog_xSpeed: { value: 1.0 }
        fog_ySpeed: { value: 1.0 }
        fog_amplitude: { value: 1.0 }
        fog_sparse: { value: 1.0 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec2 uv0;

  uniform ARGS{
    vec2 u_resolution;
  };

  uniform FOGCONFIG {
    vec4 fog_color;
    float fog_size;
    float fog_density;
    float fog_xSpeed;
    float fog_ySpeed;
    float fog_amplitude;
    float fog_sparse;
  };

  float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
  }

  float noise(vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    float a = random(i);
    float b = random(i+vec2(1.0,0.0));
    float c = random(i+vec2(0.0,1.0));
    float d = random(i+vec2(1.0,1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);
    return mix(a,b,u.x) + (c-a)*u.y*(1.0-u.x)+(d-b)*u.x*u.y;
  }

  #pragma define OCTAVES 6.0
  float fbm(vec2 st) {
    float direction = cc_time.x * fog_xSpeed;
    float vDirection = cc_time.x * fog_ySpeed;
    float value = 0.0;
    float amplitude = fog_amplitude;
    float frequency = 0.;

    for (float i = 0.0; i<OCTAVES; i++) {
      frequency = pow(2.0, i);
      value += noise(vec2((st.x * fog_size + direction * (i + 1.0) * 0.2) * frequency, (st.y * fog_size + vDirection * (i + 1.0) * 0.2) * frequency)) / frequency;
      amplitude += 1.0/frequency;
    }
    value /= amplitude;
    return clamp(value, 0.0, 1.0);
  }

  vec4 frag () {
    vec2 st = gl_FragCoord.xy / u_resolution;
    st.x *= (u_resolution.x / u_resolution.y);
    vec4 color = fog_color;
    color += fbm(st * fog_sparse) * fog_density;

    ALPHA_TEST(color);
    return color;
  }
}%