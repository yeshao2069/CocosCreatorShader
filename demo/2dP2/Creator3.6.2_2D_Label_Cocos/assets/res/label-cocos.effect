// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>
  #pragma extension([GL_OES_standard_derivatives, __VERSION__ < 110])

  in vec4 color;

  #pragma define R 0.26
  #pragma define OUTLINE 0.23
  #pragma define PI    3.14159265359
  #pragma define TWOPI 6.28318530718

  uniform MXD {
    vec2 resolution;
  };

  float remap(float a, float b, float s1, float s2, float f) {
    return (f - a)/(b - a)*(s2 - s1) + s1;
  }

  mat2 rotate2d(float _angle) {
      return mat2(cos(_angle),-sin(_angle),
                  sin(_angle),cos(_angle));
  }


  // draw text
  float circle(vec2 pt, vec2 center, float radius) {
      pt -= center;
      return length(pt) - radius;
  }

  float line(vec2 pt, vec2 start, vec2 end) {
      vec2 pa = pt - start;
      vec2 ba = end - start;
      vec2 q = start + ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
      
      return distance(pt, q);
  }

  float pie(vec2 pt, float radius, float angle) {    
      vec2 dir = normalize(pt);
      
      float theta = PI-atan(dir.y, -dir.x);
      theta = clamp(theta, angle, TWOPI - angle);
      
      vec2 q = vec2(cos(theta), sin(theta)) * radius; 
      return distance(pt, q);
  }

  float letter(vec2 pt, vec2 center, float r, float radian) {
    float radius = r;
      float theta = radians(radian);
      
      pt -= center;
      return pie(pt, radius, theta);
  }

  float letterRotate(vec2 pt, vec2 center, float r, float angle, float rotate) {
    pt -= center;
      pt = rotate2d(radians(rotate)) * pt;
      pt += center;
      float st = letter(pt, center, r, angle);
      return st;
  }

  float letterST(vec2 pt, vec2 center, float r, float angle) {
      pt -= center;
      pt = mat2(0.8, 0.,0.,1.3) * pt;
      pt += center;
      return letterRotate(pt, center, r, angle, -40.);
  }

  float letterSB(vec2 pt, vec2 center, float r, float angle) {
      pt -= center;
      pt = mat2(-0.8, 0.,0.,1.3) * pt;
      pt += center;
      return letterRotate(pt, center, r, angle, 40.);
  }

  float letterS(vec2 pt) {
    float distST = letterST(pt, vec2(-0.2, -.303), 0.017, 52.3);
      float distSB = letterSB(pt, vec2(-0.2, -0.33), 0.017, 52.3);
      return min(distST, distSB);
  }

  float letterR(vec2 pt, vec2 center) {
    const vec2 vertex00 = vec2(-0.03, 0.015);
      const vec2 vertex01 = vec2(0.007, 0.025);
      const vec2 vertex03 = vec2(-0.03, 0.03);
      const vec2 vertex02 = vec2(-0.03, -0.025);
      
      pt -= center;
      float dist0 = line(pt, vertex03, vertex00);
      float dist1 = line(pt, vertex00, vertex02);
      float dist2 = line(pt, vertex00, vertex01);
      
      return min(dist0,min(dist1, dist2));
  }

  float letterE(vec2 pt, vec2 center, float r, float angle) {
    float et = letterRotate(pt, center, r, angle, -10.);
      const vec2 vertex00 = vec2(-0.023, 0.005);
      const vec2 vertex01 = vec2(0.021, 0.005);
      pt -= center;
      float l = line(pt, vertex00, vertex01);
      return min(et, l);
  }

  float letterA(vec2 pt, vec2 center, float r, float angle) {
    float et = letterRotate(pt, center, r, angle, 10.);
      const vec2 vertex00 = vec2(0.022, 0.01);
      const vec2 vertex01 = vec2(0.032, -0.027);
      pt -= center;
      float l = line(pt, vertex00, vertex01);
      return min(et, l);
  }

  float letterT(vec2 pt, vec2 center, float r, float angle) {
      float tb = letterRotate(pt, center, r, angle, 90.);
      const vec2 vertex00 = vec2(-0.013, 0.05);
      const vec2 vertex01 = vec2(-0.013, -0.006);
      const vec2 vertex02 = vec2(-0.03, 0.03);
      const vec2 vertex03 = vec2(0.016, 0.03);
      pt -= center;
      float l = line(pt, vertex00, vertex01);
      float l2 = line(pt, vertex02, vertex03);
      return min(l2,min(l,tb));
  }

  float letter3T(vec2 pt, vec2 center, float r, float angle) {
    return letterRotate(pt, center, r, angle, 200.);
  }

  float letter3B(vec2 pt, vec2 center, float r, float angle) {
      return letterRotate(pt, center, r, angle, 165.);
  }

  float letter3(vec2 pt) {
    float dist3T = letter3T(pt, vec2(0.375, -.291), 0.021, 50.3);
      float dist3B = letter3B(pt, vec2(0.375, -.332), 0.021, 70.3);
      return min(dist3T, dist3B);
  }

  float letterD(vec2 pt, vec2 center, float r, float angle) {
    float dr = letterRotate(pt, center, r, angle, 180.);
      const vec2 vertex00 = vec2(-0.005, 0.04);
      const vec2 vertex01 = vec2(-0.005, -0.04);
      pt -= center;
      float l = line(pt, vertex00, vertex01);
      return min(dr, l);
  }

  float outline(float dist, float thickness) {
      float h = 0.5 * fwidth(dist);
      return 1.0 - smoothstep(thickness - h, thickness + h, abs(dist));    
  }

  vec4 getFragColor(vec2 bary) {
    vec4 col_1 = vec4(.6,.6,.6,1.);
      vec4 col_2 = vec4(0.4,0.4,0.4,1.);
      vec4 col_3 = vec4(0.2,0.2,0.2,1.);
      vec3 baryV = vec3(1.-bary.x-bary.y, bary.x, bary.y);
      vec4 color = baryV.x * col_1 + baryV.y * col_2 + baryV.z * col_3;
      return color;
  }

  // draw logo
  vec2 bary(vec2 v1, vec2 v2, vec2 v3, vec2 p) {
    vec2 v1_2 = v2 - v1;
      vec2 v1_3 = v3 - v1;
      vec2 vp_1 = v1 - p;
      
      vec3 v_x = vec3(v1_2.x, v1_3.x, vp_1.x);
      vec3 v_y = vec3(v1_2.y, v1_3.y, vp_1.y);
      
      vec3 u = cross(v_x, v_y);
      
      return vec2(u.x/u.z, u.y/u.z);
  }

  vec4 l_top(vec4 col, vec2 uv) {
    vec2 v1 = vec2(-0.02, 0.17);
      vec2 v2 = vec2(-0.13, 0.02);
      vec2 v3 = vec2(-.12, -0.03);
      vec2 p = vec2(uv.x, uv.y);
      
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 l_center(vec4 col, vec2 uv) {
    vec2 v1 = vec2(-0.142, 0.06);
      vec2 v2 = vec2(-0.14, -0.1);
      vec2 v3 = vec2(-.08, -0.14);
      vec2 p = vec2(uv.x, uv.y);
      
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 l_bottom(vec4 col, vec2 uv) {
    vec2 v1 = vec2(-0.14, -0.1);
      vec2 v2 = vec2(-0.05, -0.2);
      vec2 v3 = vec2(0., -0.18);
      vec2 p = vec2(uv.x, uv.y);
      
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 r_bottom(vec4 col, vec2 uv) {
    vec2 v2 = vec2(-0.05, -0.2);
      vec2 v3 = vec2(0.05, -0.2);
      vec2 v1 = vec2(0.17, -0.07);
      vec2 p = vec2(uv.x, uv.y);
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 r_center(vec4 col, vec2 uv) {
    vec2 v2 = vec2(.08, -0.1234);
      vec2 v3 = vec2(0.14, -0.0872);
      vec2 v1 = vec2(0.145, 0.08);
      vec2 p = vec2(uv.x, uv.y);
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 r_top(vec4 col, vec2 uv) {
    vec2 v3 = vec2(.12, -0.02);
      vec2 v2 = vec2(0.13, 0.03);
      vec2 v1 = vec2(-0.05, 0.22);
      vec2 p = vec2(uv.x, uv.y);
      vec2 by = bary(v1,v2,v3,p);
      if(by.x >= 0. && by.y >=0. && (by.x + by.y) <= 1.) {
        return getFragColor(by);
      }
      return col;
  }

  vec4 drawLogo(vec2 uv) {
    vec2 coord = uv;
      coord.y -=0.1;
      float l = smoothstep(R, OUTLINE,length(coord));
      float mapCol = remap(-0.25, 0.2, 0.1, 0.3, coord.y);
      vec4 col = mix(vec4(1.,1.,1.,1.), vec4(mapCol),l);
      col = mix(vec4(0.2,0.2,0.2,1.), col, l);
      col = l_top(col, coord);
      col = l_center(col, coord);
      col = l_bottom(col, coord);
      col = r_top(col, coord);
      col = r_center(col, coord);
      col += r_bottom(col, coord);
      
      return col;
  }

  vec4 drawText(vec2 uv, vec4 col) {
      // draw CocosCreator3D Text
      float distC1 = letter(uv, vec2(-0.5, -.301), 0.04, 52.3);
      float distO1 = min(distC1, circle(uv, vec2(-0.42, -.312), 0.027));
      float distC2 = min(distO1, letter(uv, vec2(-0.34, -.312), 0.028, 52.3));
      float distO2 = min(distC2, circle(uv, vec2(-0.27, -.315), 0.027));
      float distS = min(distO2, letterS(uv));
      float distC3 = min(distS, letter(uv, vec2(-0.115, -.305), 0.04, 52.3));
      float distR1 = min(distC3, letterR(uv, vec2(-0.03, -.315)));
      float distE = min(distR1, letterE(uv, vec2(0.02, -.317), 0.025,30.));
      float distA = min(distE, letterA(uv, vec2(0.1, -.317), 0.025,30.));
      float distT = min(distA, letterT(uv, vec2(0.18, -.335), 0.013,90.));
      float distO3 = min(distT, circle(uv, vec2(0.245, -.323), 0.027));
      float distR2 = min(distO3, letterR(uv, vec2(0.33, -.322)));
      float dist3 = min(distR2, letter3(uv));
      float distD = min(dist3, letterD(uv, vec2(0.43, -.314), 0.04,90.));
      float outDist = distD;
      float outlineCc = outline(outDist, .005);
      col = mix(col, vec4(.9), outlineCc);
      return col;
  }

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    vec2 r = resolution;
    vec2 fragCoord = uv0 * r;

    vec2 uv = (fragCoord - resolution.xy * .5) / resolution.y;
    uv.x *= r.x / r.y;

    vec4 logo = drawLogo(uv);
    vec4 col = drawText(uv, logo);
    o = col;

    return o;
  }
}%
