// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
//
//Shader License: CC BY 3.0
//Author: Jan Mr√≥z (jaszunio15)

/*
	How to set this wallpaper on your android:
	1. Install Shader Editor.
	2. Copy the code from the common tab and paste into the Shader Editor.
	3. Tap "Update Wallpaper" from Shader Editor menu.
	4. Set Shader Editor as a live wallpaper in android settings.
*/
// https://www.shadertoy.com/view/3t3GDB

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }

        resolution: { value: [960, 640] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;
  
  float gTime = 0.;
  const float REPEAT = 5.0;

  uniform MXD {
    vec2 resolution;
  };

  float sun(vec2 uv, float battery) {
 	  float val = smoothstep(0.3, 0.29, length(uv));
 	  float bloom = smoothstep(0.7, 0.0, length(uv));
    float cut = 3.0 * sin((uv.y + cc_time.x * 0.2 * (battery + 0.02)) * 100.0) 
				+ clamp(uv.y * 14.0 + 1.0, -6.0, 6.0);
    cut = clamp(cut, 0.0, 1.0);
    return clamp(val * cut, 0.0, 1.0) + bloom * 0.6;
  }

  float grid(vec2 uv, float battery) {
    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;
    uv += vec2(0.0, cc_time.x * 4.0 * (battery + 0.05));
    uv = abs(fract(uv) - 0.5);
 	  vec2 lines = smoothstep(size, vec2(0.0), uv);
 	  lines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.4 * battery;
    return clamp(lines.x + lines.y, 0.0, 3.0);
  }

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
    #endif

    vec2 r = resolution;
    vec2 fragCoord = uv0 * r;
    vec2 uv = (2.0 * fragCoord.xy - r.xy) / r.y;
    float battery = 1.0;

    if (abs(uv.x) < (r.x / r.y)) {
      float fog = smoothstep(0.1, -0.02, abs(uv.y + 0.2));
      vec3 col = vec3(0.0, 0.1, 0.2);

      if (uv.y < -0.2) {
        uv.y = 3.0 / (abs(uv.y + 0.2) + 0.05);
        uv.x *= uv.y * 1.0;
        float gridVal = grid(uv, battery);
        col = mix(col, vec3(1.0, 0.5, 1.0), gridVal);
      } else {
        uv.y -= battery * 1.1 - 0.51;
        col = vec3(1.0, 0.2, 1.0);
        float sunVal = sun(uv, battery);
        col = mix(col, vec3(1.0, 0.4, 0.1), uv.y * 2.0 + 0.2);
        col = mix(vec3(0.0, 0.0, 0.0), col, sunVal);
        col += vec3(0.0, 0.1, 0.2);
      }

      col += fog * fog * fog;
      col = mix(vec3(col.r, col.r, col.r) * 0.5, col, battery * 0.7);
      o = vec4(col,1.0);
    } else {
      o = vec4(0.0);
    }

    return o;
  }
}%
