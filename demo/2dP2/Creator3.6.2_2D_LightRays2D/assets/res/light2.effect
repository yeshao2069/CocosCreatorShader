t// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        textureSize: {value: [500.0,500.0],editor: {tooltip: "节点尺寸"}}
        ltColor: {value: [0.2,1.0,1.0,1.0], editor: { type: color } }
       
}%

CCProgram sprite-vs %{
  precision highp float;

  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {

    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif


    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision mediump float;
  #include <builtin/uniforms/cc-global>
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  in vec4 color;

  uniform ARGS{
    vec2 textureSize;
  };
  uniform COLORARGS{
    vec4 ltColor;
  };
  const float PI = 3.141592654;
  const float side = 0.3;
  const float angle = PI * 1.0 / 3.0;
  const float sinA = 0.86602540378;
  const float cosA = 0.5;
  
  vec4 rayColor(vec2 fragToCenterPos, vec2 fragCoord){
    float d = length(fragToCenterPos);
    fragToCenterPos = normalize(fragToCenterPos);
    float multiplier = 0.0;
    const float loop = 60.0;
    const float dotTreshold = 0.90;
    const float timeScale = 0.75;
    const float fstep = 10.0;

    float c = 0.5 /(d * d);
    float freq = 0.25;
    for(float i = 1.0;i < loop; i++){
      float attn = c;
      attn *= 1.85 * (sin(i * 0.3 * cc_time.x) * 0.5 + 0.5);
      float t = cc_time.x * timeScale - fstep * i;
      vec2 dir = vec2(cos(freq * t), sin(freq * t));
      float m = dot(dir,fragToCenterPos);
      m = pow(abs(m),4.0);
      m *= float((m) > dotTreshold);
      multiplier += 0.5 * attn * m / (i);
    } 

    const float r0 = 0.345;
    const float r1 = r0 + 0.02;
    const float r2 = r1 + 0.005;

    float f = 1.0;
    //if (d < r0) f = smoothstep(0.0, 1.0, d/r0);
	  //else if (d < r1) f = 0.75;//(d - r0) / (r1 - r0);
	  //else if (d < r2) f = 1.2;
    // const vec4 rayColor = vec4(0.9,0.7,0.3,1.0);

    float pat = abs(sin(10.0 * mod(fragCoord.y * fragCoord.x,1.5)));
    f += pat;
    vec4 col = f * multiplier * ltColor;
    return col;

  }


  #if USE_TEXTURE
    in vec2 uv0;

    uniform sampler2D u_dissolveMap;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = color;
    float aspect = textureSize.x / textureSize.y;
    vec3 pos = vec3(uv0.xy,1.0);
    pos.x *= aspect;
    // pos.x /=aspect;
    vec2 fragToCenterPos = vec2(pos.x - .5 * aspect, pos.y+0.2);
    vec4 rayCol = rayColor(fragToCenterPos,uv0);
    // float u,v,w;
    // float lim = 0.075;

    // vec3 normal = vec3(0.0, 0.0, 1.0);
    // vec3 uNormalContrib = vec3(0.0);
    // vec3 vNormalContrib = vec3(0.0);
    // vec3 wNormalContrib = vec3(0.0);

    // if( u < lim){
    //   float uNorm = u / lim;
    //   float offset = cos(0.5 * PI * uNorm);
    //   offset *= offset;
    //   uNormalContrib = vec3(0.0, -offset,0.0);

    // }

    // if(v < lim){
    //   float vNorm = v / lim;
    //   float offset = -cos(0.5 * PI * vNorm);
    //   offset *= offset;
    //   vNormalContrib = vec3(offset * cosA, offset * sinA, 0.0);

    // }

    // if(w < lim){
    //   float wNorm = w / lim;
    //   float offset = cos(0.5 * PI * wNorm);
    //   offset *= offset;
    //   wNormalContrib = vec3(-offset * cosA, offset * sinA, 0.0);
    // }

    // normal += uNormalContrib + vNormalContrib + wNormalContrib;
    // normal = normalize(normal);

    // float freq = 1.5 * cc_time.x;
    // vec3 view = vec3(0.5, 0.5, 0.0) + vec3(sin(freq), cos(freq), 2.0);
    // view = normalize(view);

    // float light = dot(view,normal);

    // float minW = mod(1.15 * cc_time.x, 4.0);
    // float maxW = minW + 0.3;
    // float s = 1.0;
    // if(w > minW && w < maxW){
    //   s += 0.1;
    // }
    // rayCol.x *= normal.x;
    // rayCol.y *= normal.y;
    // rayCol.z *= normal.z;
    return rayCol;
  }
}%


