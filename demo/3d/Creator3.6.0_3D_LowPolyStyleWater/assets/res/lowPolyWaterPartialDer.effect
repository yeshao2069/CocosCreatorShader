// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <common/common-define>


  in vec3 a_color;
  // in vec2 a_texCoord;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec2 v_uv1;
  out vec3 v_color;

  vec3 calcHeightNormal(inout vec3 Pos,float unitSize){

    float x = Pos.x;
    float z = Pos.z;

    float waveHeight = unitSize / 2.0;  
    float waveLength = unitSize * 1.0;
    float waveSpeed = waveLength / 4.0 ;

    float waveFrequency = 2.0 * PI / waveLength;  


    float phaseConstant =  2.0 * PI * waveSpeed /  waveLength;

    float sHeight = 0.0;

    vec2 dir;

    float k = 3.0;
    float A = 0.05;

    dir = vec2(-1.0, 1.0);
    float height1 = sin(dot(normalize(dir),vec2(x,z)) * waveFrequency + cc_time.x * phaseConstant);
    float y1 = 2.0 * A * pow((height1 + 1.0) / 2.0, k);//正弦波方程式
    sHeight += y1;

    float partialDer1 =  k * A * waveFrequency * pow((height1 + 1.0) / 2.0, k - 1.0) * cos(height1);
    float partialDerX1 = partialDer1 * dot(normalize(dir), vec2(x, 0.0));
    float partialDerZ1 = partialDer1 * dot(normalize(dir), vec2(z, 0.0));

    dir = vec2(-1.0, -1.0);
    float height2 = sin(dot(normalize(dir),vec2(x,z)) * waveFrequency + cc_time.x * phaseConstant);
    float y2 = 2.0 * A * pow((height2 + 1.0) / 2.0, k);//正弦波方程式
    sHeight += y2;

    float partialDer2 =  k * A * waveFrequency * pow((height2 + 1.0) / 2.0, k - 1.0) * cos(height2);
    float partialDerX2 = partialDer1 * dot(normalize(dir), vec2(x, 0.0));
    float partialDerZ2 = partialDer1 * dot(normalize(dir), vec2(z, 0.0));

    float partialDerX = partialDerX1 + partialDerX2;
    float partialDerZ = partialDerZ1 + partialDerZ2;

    vec3 normal = normalize(vec3(-partialDerX, 1, -partialDerZ));
    Pos.xyz = vec3(x, sHeight, z);
    return normal;  
  }

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);
    

    // v_position = (matWorld * In.position).xyz;
    v_position = In.position.xyz;
    

    v_normal = calcHeightNormal(v_position, In.normal.y);

    // v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

    v_position = (matWorld * vec4(v_position.xyz, In.position.w)).xyz;

    v_uv = a_texCoord;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
    #endif
    v_color = a_color;

    // return cc_matProj * (cc_matView * matWorld) * In.position;
    return cc_matProj * cc_matView * vec4(v_position.xyz, 1.0);
  }
}%


CCProgram unlit-fs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/shading-standard-base>
  #include <legacy/output-standard>
  #include <common/color/gamma>

  in vec3 v_position;
  in vec2 v_uv;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
  };


  void surf (out StandardSurface s) {
    vec4 baseColor = mainColor;

    vec4 texColor = texture(mainTexture, v_uv);
    texColor.rgb = SRGBToLinear(texColor.rgb);
    baseColor *= texColor;

    s.albedo = baseColor;

    s.normal = v_normal;

    s.position = v_position;
    
    vec4 pbr = vec4(1.0,0.8,0.6,1);

    s.occlusion = clamp(pbr.x, 0.0, 0.96);
    s.roughness = clamp(pbr.y, 0.04, 1.0);
    s.specularIntensity = 0.5;
    s.metallic = pbr.z;

    vec4 emissive = vec4(0.0, 0.0, 0.0, 1.0);

    s.emissive = emissive.rgb * vec3(1.0, 1.0, 1.0);
  }

  vec4 frag () {
    StandardSurface s; surf(s);
    vec4 color = CCStandardShadingBase(s, vec4(1.));
    return CCFragOutput(color);
  }
}%
