
CCEffect %{
  techniques:
  - name: transparent
    passes:
    - vert: fx-raindrop-vs:vert # builtin header
      frag: unlit-fs:frag
      properties:
        winSize:      { value: [375.0, 667.0], editor: { displayName: window size } }
        screenTex:    { value: white }
}%

CCProgram fx-raindrop-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>

  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    v_uv = a_texCoord;

    return In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <builtin/uniforms/cc-global>
  #include <legacy/fog-fs>

  uniform Constants {
    vec2 winSize;
  };

  in vec2 v_uv;

  uniform sampler2D screenTex;

#pragma define-meta DROP_TAILTILE 3.0

  float N11(float t) {
    return fract(sin(t*10234.324)*123423.23512);
  }

  float N12(vec2 p)
  { // Dave Hoskins - https://www.shadertoy.com/view/4djSRW
    vec3 p3  = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
  }

  vec2 rain(vec2 uv, vec2 gridsWH, float speed) {
    float time = cc_time.x;
    uv.y += time * speed;

    vec2 cellUV = uv*gridsWH;
    vec2 id = floor(cellUV);
    cellUV = fract(cellUV);
    float noise = N12(id);
		time += noise * 6.14;

    vec2 dropUV = cellUV - 0.5;
    vec2 gridSize = winSize/gridsWH;
    gridSize /= gridSize.y;
    float rDrop = 0.;
    dropUV.y += sin(time + sin(time + sin(time)* 0.5)) * 0.4;
    rDrop = length(dropUV * gridSize);
    rDrop = smoothstep(0.1, 0.08, rDrop);

    vec2 trailUV = cellUV * vec2(1., 8.);
    trailUV = fract(trailUV);
    trailUV -= 0.5;
    float rTrail = length(trailUV * gridSize / vec2(1., 8.));
    rTrail = smoothstep(0.05, 0.03, rTrail);
    rTrail *= smoothstep(-0.01, 0., dropUV.y);
    rTrail *= smoothstep(0.4, 0., dropUV.y);

    // if (cellUV.x > .99 || cellUV.y > .99) rDrop = 1.;

    // return vec2(rDrop + rTrail);
    return vec2(rDrop * dropUV + rTrail * trailUV);
  }

  vec4 frag() {
    vec2 uv = v_uv;
    vec4 col = vec4(0.);

    float x = 0.18;
    float s = sin(x);
    float c = cos(x);
    mat2 rot = mat2(c, -s, s, c);
    uv = rot * uv;

    vec2 offsetUV = vec2(0.);
    offsetUV += rain(uv, vec2(10., 6.),  0.1);
    offsetUV += rain(uv, vec2(26., 15.),  0.03);
    col += vec4(length(offsetUV));
    vec4 texCol = texture(screenTex, v_uv + offsetUV);
    col = texCol;

    return CCFragOutput(col);
  }

}%
