// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;
  out vec4 _textureSize;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    _textureSize = cc_screenSize;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;
  in vec4 _textureSize;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  #define _MainTex_TexelSize_y (1.0 / _textureSize.y)
  #define _MainTex_TexelSize_x (1.0 / _textureSize.x)

  vec3 sobel(vec2 uv)
  {
    vec3 x = vec3(0.0, 0.0, 0.0);
    vec3 y = vec3(0.0, 0.0, 0.0);

#if USE_TEXTURE
    x += texture(cc_spriteTexture, uv + vec2(-_MainTex_TexelSize_x, -_MainTex_TexelSize_y)).rgb * -1.0;
    x += texture(cc_spriteTexture, uv + vec2(-_MainTex_TexelSize_x,                   0.0)).rgb * -2.0;
    x += texture(cc_spriteTexture, uv + vec2(-_MainTex_TexelSize_x,  _MainTex_TexelSize_y)).rgb * -1.0;

    x += texture(cc_spriteTexture, uv + vec2( _MainTex_TexelSize_x, -_MainTex_TexelSize_y)).rgb *  1.0;
    x += texture(cc_spriteTexture, uv + vec2( _MainTex_TexelSize_x,                   0.0)).rgb *  2.0;
    x += texture(cc_spriteTexture, uv + vec2( _MainTex_TexelSize_x,  _MainTex_TexelSize_y)).rgb *  1.0;

    y += texture(cc_spriteTexture, uv + vec2(-_MainTex_TexelSize_x, -_MainTex_TexelSize_y)).rgb * -1.0;
    y += texture(cc_spriteTexture, uv + vec2(                  0.0, -_MainTex_TexelSize_y)).rgb * -2.0;
    y += texture(cc_spriteTexture, uv + vec2( _MainTex_TexelSize_x, -_MainTex_TexelSize_y)).rgb * -1.0;

    y += texture(cc_spriteTexture, uv + vec2(-_MainTex_TexelSize_x,  _MainTex_TexelSize_y)).rgb *  1.0;
    y += texture(cc_spriteTexture, uv + vec2(                  0.0,  _MainTex_TexelSize_y)).rgb *  2.0;
    y += texture(cc_spriteTexture, uv + vec2( _MainTex_TexelSize_x,  _MainTex_TexelSize_y)).rgb *  1.0;
#endif

    return sqrt(x * x + y * y);
  }

  // Credit: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
  vec3 rgb2hsv(vec3 c)
  {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);
    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
  }

  // Credit: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl
  vec3 hsv2rgb(vec3 c)
  {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp((p - K.xxx), 0.0, 1.0), c.y);
  }

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec3 s = sobel(uv0);
      vec4 tex = texture(cc_spriteTexture, uv0);

      vec3 hsvTex = rgb2hsv(tex.rgb);
      hsvTex.y = 1.0;		// Modify saturation.
      hsvTex.z = 1.0;		// Modify lightness/value.
      vec3 col = hsv2rgb(hsvTex);

      o = vec4(col * s, 1.0);
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
