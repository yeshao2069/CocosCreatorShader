// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        _ColorA: { value: [0.90, 0.00, 0.00, 1], editor: {type: color} }
        _ColorB: { value: [1.00, 0.55, 0.00, 1], editor: {type: color} }
        _ColorC: { value: [1.00, 0.94, 0.00, 1], editor: {type: color} }
        _ColorD: { value: [0.00, 0.51, 0.12, 1], editor: {type: color} }
        _ColorE: { value: [0.00, 0.27, 1.00, 1], editor: {type: color} }
        _ColorF: { value: [0.46, 0.00, 0.54, 1], editor: {type: color} }
        _MixAmount: { value: 0.25 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;
    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  uniform CONSTANT {
    vec4 _ColorA;
    vec4 _ColorB;
    vec4 _ColorC;
    vec4 _ColorD;
    vec4 _ColorE;
    vec4 _ColorF;
    float _MixAmount;
  };

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec4 tex = texture(cc_spriteTexture, uv0);
      vec4 col = tex;

      if (uv0.y < 1.0 / 6.0)
      {
        col = mix(tex, _ColorF, _MixAmount);
      }
      else if (uv0.y < 2.0 / 6.0)
      {
        col = mix(tex, _ColorE, _MixAmount);
      }
      else if (uv0.y < 3.0 / 6.0)
      {
        col = mix(tex, _ColorD, _MixAmount);
      }
      else if (uv0.y < 4.0 / 6.0)
      {
        col = mix(tex, _ColorC, _MixAmount);
      }
      else if (uv0.y < 5.0 / 6.0)
      {
        col = mix(tex, _ColorB, _MixAmount);
      }
      else
      {
        col = mix(tex, _ColorA, _MixAmount);
      }

      o = col;
    #endif

    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
