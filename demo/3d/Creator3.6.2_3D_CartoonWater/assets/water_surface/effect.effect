// Effect Syntax Guide: https://github.com/cocos-creator/docs-3d/blob/master/zh/material-system/effect-syntax.md

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        reflectTexture: { value: white }
        fReflect:       { value: 0.5, editor: { slide: true, range:[0, 1], step: 0.01 } }
        fresnelPow:     { value: 1.0 }
        noiseTexture:   { value: white }
        rimColor:       { value: [1, 1, 1, 1], editor: { type: color } }
  - name: transparent
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;
  uniform sampler2D noiseTexture;
  uniform samplerCube reflectTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 rimColor;
    float fReflect;
    float fresnelPow;
  };

  vec4 frag () {
    float T = texture(noiseTexture, v_uv + v_position.xz * 0.1 + cc_time.x * 0.05).r;
    vec3 N = normalize(v_normal);
    vec3 V = normalize(v_position - cc_cameraPos.xyz);
    vec3 R = (V - 2.0 * dot(V, N) * N) + T * 0.03;
    vec4 reflectColor = texture(reflectTexture, R);
    float fresnel = pow(1.0 - dot(N, -V), fresnelPow);

    vec4 col = mainColor * texture(mainTexture, v_uv);
    col.rgb = mix(col.rgb, reflectColor.rgb, fReflect * fresnel);
    col.rgb = mix(col.rgb, vec3(1.0), smoothstep(0.91, 0.911, T));
    vec2 D = v_uv - vec2(0.5, 0.5);
    col.rgb = mix(col.rgb, rimColor.rgb, rimColor.a * smoothstep(0.0, 0.3, dot(D, D)));

    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
