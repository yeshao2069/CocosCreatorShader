
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: fx-bloom2-threshold-vs:vert # builtin header
      frag: fx-bloom2-threshold-fs:frag
      properties:
        texSize:    { value: [1, 1]}
        direction:  { value: [0, 1]}
        tempTex:    { value: white }
}%

CCProgram fx-bloom2-threshold-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>

  out vec2 v_uv;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    v_uv = a_texCoord;

    return In.position;
  }
}%

CCProgram fx-bloom2-threshold-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;

  uniform sampler2D tempTex;
  uniform Constants {
    vec2 texSize;
    vec2 direction;
  };

  #pragma define WINDOW_SIZE 5.

  float gaussianPdf(in float x, in float sigma) {
    return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;
  }

  vec4 frag () {
    vec2 invSize = 1.0 / texSize;
    float fSigma = 3.0;
    float weightSum = gaussianPdf(0.0, fSigma);
    vec3 diffuseSum = texture( tempTex, v_uv).rgb * weightSum;
    for( int i = 1; i < 3; i++ ) {
      float x = float(i);
      float w = gaussianPdf(x, fSigma);
      vec2 uvOffset = direction * invSize * x;
      vec3 sample1 = texture( tempTex, v_uv + uvOffset).rgb;
      vec3 sample2 = texture( tempTex, v_uv - uvOffset).rgb;
      diffuseSum += (sample1 + sample2) * w;
      weightSum += 2.0 * w;
    }

    return CCFragOutput(vec4(diffuseSum/weightSum, 1.0));
  }

}%

